package egts

import (
	"time"
)

// Преобразуем время навигации к формату, который требует стандарт: количество секунд с 00:00:00 01.01.2010 UTC
var timeOffset = time.Date(2010, time.January, 1, 0, 0, 0, 0, time.UTC)

/* Типы SFRD */
const (
	EGTS_PT_RESPONSE       = 0 // EGTS_PT_RESPONSE (подтверждение на пакет Транспортного Уровня)
	EGTS_PT_APPDATA        = 1 // EGTS_PT_APPDATA (пакет содержащий данные  ППУ)
	EGTS_PT_SIGNED_APPDATA = 2 // EGTS_PT_SIGNED_APPDATA (пакет содержащий данные  ППУс цифровой подписью)
)

/* Типы подзаписей авторизации*/
const (
	EGTS_SR_RECORD_RESPONSE     = 0 // подтверждения приема и передачи результатов обработки записи уровня поддержки услуг
	EGTS_SR_TERM_IDENTITY       = 1 // Подзапись используется только АСН при запросе авторизации на авторизующей ТП и содержит учетные данные АСН
	EGTS_SR_MODULE_DATA         = 2 // предназначена для передачи на ТП информации об инфраструктуре на стороне АСН, о составе, состоянии и параметрах блоков и модулей АСН
	EGTS_SR_VEHICLE_DATA        = 3 // применяется ACH для передачи на ТП информации о ТС
	EGTS_SR_DISPATCHER_IDENTITY = 5 // используется только авторизуемой ТП при запросе авторизации на авторизующей ТП и содержит учетные данные авторизуемой АСН
	EGTS_SR_AUTH_PARAMS         = 6 // используется авторизующей ТП для передачи на АСН данных о способе и параметрах шифрования, требуемого для дальнейшего взаимодействия
	EGTS_SR_AUTH_INFO           = 7 // для передачи на авторизующую ТП аутентификационных данных АСН (авторизуемой ТП) с использованием ранее переданных со стороны авторизующей ТП параметров для осуществления шифрования данных
	EGTS_SR_SERVICE_INFO        = 8 // используется для информирования принимающей стороны, АСН или ТП, в зависимости от направления отправки, о поддерживаемых сервисах, а также для запроса
	EGTS_SR_RESULT_CODE         = 9 // применяется авторизующей ТП для информирования АСН (авторизуемой ТП) о результатах процедуры аутентификации АСН
)

/* Типы подзаписей данных */
const (
	EGTS_SR_EGTS_PLUS_DATA      = 15 //EGTS_SR_EGTS_PLUS_DATA
	EGTS_SR_POS_DATA            = 16 // ACN-> основных данных определения местоположения
	EGTS_SR_EXT_POS_DATA        = 17 // ACN-> дополнительных данных определения местоположения
	EGTS_SR_AD_SENSORS_DATA     = 18 // ACN-> аппаратно-программный комплекс информации о состоянии дополнительных дискретных и аналоговых входов
	EGTS_SR_COUNTERS_DATA       = 19 // ->ACN данных о значении счетных входов
	EGTS_SR_STATE_DATA          = 20 // ACN-> информации о состоянии АСН
	EGTS_SR_ACCEL_DATA          = 21 // ->ACN ???
	EGTS_SR_LOOPIN_DATA         = 22 //АСН->данных о состоянии шлейфовых входов
	EGTS_SR_ABS_DIG_SENS_DATA   = 23 //АСН->данных о состоянии одного дискретного входа
	EGTS_SR_ABS_AN_SENS_DATA    = 24 //АСН->данных о состоянии одного аналогового входа
	EGTS_SR_ABS_CNTR_DATA       = 25 //АСН->данных о состоянии одного счетного входа
	EGTS_SR_ABS_LOOPIN_DATA     = 26 //АСН->данных о состоянии одного шлейфового входа
	EGTS_SR_LIQUID_LEVEL_SENSOR = 27 //АСН->данных о показаниях ДУТ
	EGTS_SR_PASSENGERS_COUNTERS = 28 //АСН->данных о показаниях счетчиков пассажиропотока
)

/* коды ошибок */
const (
	EGTS_PC_OK              = 0x00 // Успешно
	EGTS_PC_IN_PROGRESS     = 0x01 // В процессе обработки (результат обработки ещё не известен)
	EGTS_PC_UNS_PROTOCOL    = 0x80 // Неподдерживаемый протокол
	EGTS_PC_DECRYPT_ERROR   = 0x81 // Ошибка декодирования
	EGTS_PC_PROC_DENIED     = 0x82 // Обработка запрещена
	EGTS_PC_INC_HEADERFORM  = 0x83 // Неверный формат заголовка
	EGTS_PC_INC_DATAFORM    = 0x84 // Неверный формат данных
	EGTS_PC_UNS_TYPE        = 0x85 // Неподдерживаемый тип
	EGTS_PC_NOTEN_PARAMS    = 0x86 // Неверное количество параметров
	EGTS_PC_DBL_PROC        = 0x87 // Попытка повторной обработки
	EGTS_PC_PROC_SRC_DENIED = 0x88 // Обработка данных от источника запрещена
	EGTS_PC_HEADERCRC_ERROR = 0x89 // Ошибка контрольной суммы заголовка
	EGTS_PC_DATACRC_ERROR   = 0x8A // Ошибка контрольной суммы данных
	EGTS_PC_INVDATALEN      = 0x8B // Некорректная длина данных
	EGTS_PC_ROUTE_NFOUND    = 0x8C // Маршрут не найден
	EGTS_PC_ROUTE_CLOSED    = 0x8D // Маршрут закрыт
	EGTS_PC_ROUTE_DENIED    = 0x8E // Маршрутизация запрещена
	EGTS_PC_INVADDR         = 0x8F // Неверный адрес
	EGTS_PC_TTLEXPIRED      = 0x90 // Превышено количество ретрансляции данных
	EGTS_PC_NO_ACK          = 0x91 // Нет подтверждения
	EGTS_PC_OBJ_NFOUND      = 0x92 // Объект не найден
	EGTS_PC_EVNT_NFOUND     = 0x93 // Событие не найдено
	EGTS_PC_SRVC_NFOUND     = 0x94 // Сервис не найден
	EGTS_PC_SRVC_DENIED     = 0x95 // Сервис запрещён
	EGTS_PC_SRVC_UNKN       = 0x96 // Неизвестный тип сервиса
	EGTS_PC_AUTH_DENIED     = 0x97 // Авторизация запрещена
	EGTS_PC_ALREADY_EXISTS  = 0x98 // Объект уже существует
	EGTS_PC_ID_NFOUND       = 0x99 // Идентификатор не найден
	EGTS_PC_INC_DATETIME    = 0x9A // Неправильная дата и время
	EGTS_PC_IO_ERROR        = 0x9B // Ошибка ввода вывода
	EGTS_PC_NO_RES_AVAIL    = 0x9C // Недостаточно ресурсов
	EGTS_PC_MODULE_FAULT    = 0x9D // Внутренний сбой модуля
	EGTS_PC_MODULE_PWR_FLT  = 0x9E // Сбой в работе цепи питания модуля
	EGTS_PC_MODULE_PROC_FLT = 0x9F // Сбой в работе микроконтроллера модуля
	EGTS_PC_MODULE_SW_FLT   = 0xA0 // Сбой в работе программы модуля
	EGTS_PC_MODULE_FW_FLT   = 0xA1 // Сбой в работе внутреннего ПО модуля
	EGTS_PC_MODULE_IO_FLT   = 0xA2 // Сбой в работе блока ввода вывода модуля
	EGTS_PC_MODULE_MEM_FLT  = 0xA3 // Сбой в работе внутренней памяти модуля
	EGTS_PC_TEST_FAILED     = 0xA4 // Тест не пройден

)

const DEFAULT_HEADER_LEN = 11
const HEADERLEN = 10

// Типы сервисов
const (
	SERVICE_AUTH = 1 // Сервис AUTH_SERVICE
	SERVICE_DATA = 2 // Сервис TELEDATA_SERVICE
)

// RecordDataSet описывает массив с подзаписями протокола ЕГТС
type RecordDataSet []RecordData

// BinaryData интерфейс для работы с бинарными секциями
type BinaryData interface {
	Decode([]byte) error
	Encode() ([]byte, error)
	Length() uint16
}

// _________________________________________________________________________
// -------------------------------------------------------------------------------------
// структура пакета транспорного уровня
// 0100030B001300860001B608005F0099020000000101010500B0090200100DCE
type EgtsPt struct {
	Prv  byte //Protocol Version  Значение данного параметра инкрементируется каждый раз при вне
	Skid byte //Security Key ID   определяет идентификатор ключа, используемого при шифровании
	Prf  byte //Prefix    маска
	// 7-й бит - RTE (Route )значение 1, то необходима маршрутизация и поля PRA, RCA, TTL
	// 5-й бит Поле ENA (Encryption Algorithm) определяет код алгоритма, используемый для
	//  шифрования данных из поля SFRD. Если поле имеет значение 00, то данные в поле SFRD
	//  не шифруются.
	// 4-й бит Поле CMP (Compressed) определяет, используется ли сжатие данных из поля SFRD.
	//   Если поле имеет значение 1, то данные в поле SFRD считаются сжатыми.
	// 1 и 0 бит
	// Поле PR (Priority) определяет приоритет маршрутизации данного пакета и может
	// принимать следующие значения:- 00 - наивысший;- 01 - высокий;- 10 - средний;- 11 - низкий.
	Hl  byte   //Header Length  длина заголовка транспортного уровня в байтах с учетом байта контрольной суммы (поля HCS).
	He  byte   //Header Encoding определяет применяемый метод кодирования следующей за данным 	параметром части заголовка транспортного уровня.
	Fdl uint16 //Frame Data Length пределяет размер в байтах поля данных SFRD, содержащего информацию протокола уровня поддержки услуг
	Pid uint16 //Packet Identifier содержит номер пакета транспортного уровня, увеличивающийся на 1 при отправке каждого нового пакета на стороне отправителя.
	Pt  byte   //Packet Type  тип пакета транспортного уровня. Поле PT может принимать следующие значения:
	// - 0 - EGTS_PT_RESPONSE (подтверждение на пакет транспортного уровня);
	// - 1 - EGTS_PT_APPDATA (пакет, содержащий данные протокола уровня поддержки услуг);
	// - 2 - EGTS_PT_SIGNED_APPDATA (пакет, содержащий данные протокола уровня 	поддержки услуг с цифровой подписью).
}
type EgtsPt_ete struct {
	Pra uint16 //Peer Address адрес аппаратно-программного комплекса, на котором данный пакет	сгенерирован.
	// Данный адрес является уникальным в рамках сети и используется для создания пакета-подтверждения на принимающей стороне.
	Rca uint16 //Recipient Address адрес аппаратно-программного комплекса, для которого данный пакет предназначен.
	// По данному адресу производится идентификация принадлежности пакета определенного аппаратно-программного комплекса
	// и его маршрутизация при использовании промежуточных аппаратно-программных комплексов.
	Ttl byte //Time To Live время жизни пакета
}
type EgtsPt_hcs struct {
	Hcs byte //Header Check Sum контрольная сумма заголовка Транспортного уровня
	// (начиная с поля "PRV" до поля "HCS", не включая поле "HCS" алгоритм CRC-8
	//Sfrd   //Services Frame Data структура данных, зависящая от типа пакета и содержащая информацию протокола уровня поддержки услуг
	//Sfrcs  uint16 //Services Frame Data Check Sum контрольная сумма поля протокола уровня поддержки услуг алгоритм CRC-16
}

//---------------------------------------------------

// структура Sfrd записи
// ---------------------------------------------------------------------------------------
type EgtsSfrd struct {
	Rl  uint16 //Record Length параметр определяет размер данных из поля RD
	Rn  uint16 //Record Number номер записи, Значение данного поля используется для подтверждения записи
	Rfl byte   //Record Flags
	// 7 - SSOD  1 - сервис-отправитель расположен на стороне АСН, 0 на авторизующей ТП
	// 6 - RSOD определяющий расположение сервиса-получателя, 1 - сервис-получатель расположен на стороне АСН, 0 -ТП
	// 5 - GRP определяющий принадлежность передаваемых данных, указан в поле OID, 1 -группа, 0 - принадлежность отсутствует
	// 4 - 3 - RPP приоритет: 00 - наивысший,  01 - высокий,  10 - средний,  11 - низкий
	// 2 - TMFE наличие в данном пакете поля TM, 1- наличие 0- отсутствие
	// 1 - EVFE наличие EVID 1- наличие 0- отсутствие
	// 0 - OBFE наличие OID
}
type EgtsSfrd_oid struct {
	Oid uint32 //Object Identifier уникальный идентификатор АСН либо GRP
}
type EgtsSfrd_evid struct {
	Evid uint32 //Event Identifier уникальный идентификатор события
}
type EgtsSfrd_tm struct {
	Tm uint32 //Time время формирования записи на стороне отправителя
}
type EgtsSfrd_st struct {
	Sst byte //Source Service Type   идентификатор типа сервиса-отправителя
	Rst byte //Recipient Service Type идентификатор типа сервиса-получателя данной записи
	///Rd    //Record Data
}

//------------------------------

// -----------------------------------------------------------------------------------------
// структура пакета подзаписи
type EgtsSrd struct {
	Srt byte   // Subrecord Type тип подзаписи, Тип 0 подтверждения данных длина данных в байтах подзаписи в поле SRD
	Srl uint16 // Subrecord Length
	// Srd  []byte // Subrecord Data
}

// -----------------------------------------------------------------------------------------
// пакет  запроса авторизации EGTS_SR_TERM_IDENTITY
type EgtsTermIndent struct {
	Tid   uint64 //уникальный идентификатор, назначаемый при программировании АСН, если 0 то не прошел процедуру конфигурирования
	Flags byte   //
	// 0b -  HDID  - uint16
	// 1b -  IMEI  - [15]byte
	// 2b - IMSI  - [16]byte
	// 3b - LNGC - [3]byte
	// 4b - SSRA -
	// 5b - NIDE
	// 6b - BSE
	// 7b - MSISDN
}
type EgtsTermIndent_Id struct {
	Hdid uint16
}

//......

// пакет ответа
type EgtsPtResponse struct {
	Rpid uint16 // (Response Packet ID) идентификатор пакета транспортного уровня, подтверждение на который сформировано
	PR   byte   // (Processing Result)  код результата обработки части пакета, относящейся к транспортному уровню
	//SDR 1..n (Service Data Record)  содержат информацию уровня поддержки услуг
}

// пакет поддержки услуг (ППУ)
type EgtsPtAppdata struct {
	Sigl int16 //(Signature Length) Параметр SIGL определяет длину данных "цифровой подписи" из поля SIGD
	//SIGD (Signature Data) содержит непосредственно данные "цифровой подписи".
	//SDR 1..n (Service Data Record) содержащий данные протокола уровня поддержки услуг (ППУ)
}

type Egts_pos_alt struct { // if FLG&&1
	Alt [3]byte // (Altitude) if Flg 7b =1
}
