// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LoggingControl_SetLogLevel_FullMethodName = "/proto.LoggingControl/SetLogLevel"
)

// LoggingControlClient is the client API for LoggingControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Общий сервис для управления логированием на любом из сервисов
type LoggingControlClient interface {
	SetLogLevel(ctx context.Context, in *SetLogLevelRequest, opts ...grpc.CallOption) (*SetLogLevelResponse, error)
}

type loggingControlClient struct {
	cc grpc.ClientConnInterface
}

func NewLoggingControlClient(cc grpc.ClientConnInterface) LoggingControlClient {
	return &loggingControlClient{cc}
}

func (c *loggingControlClient) SetLogLevel(ctx context.Context, in *SetLogLevelRequest, opts ...grpc.CallOption) (*SetLogLevelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetLogLevelResponse)
	err := c.cc.Invoke(ctx, LoggingControl_SetLogLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoggingControlServer is the server API for LoggingControl service.
// All implementations must embed UnimplementedLoggingControlServer
// for forward compatibility.
//
// Общий сервис для управления логированием на любом из сервисов
type LoggingControlServer interface {
	SetLogLevel(context.Context, *SetLogLevelRequest) (*SetLogLevelResponse, error)
	mustEmbedUnimplementedLoggingControlServer()
}

// UnimplementedLoggingControlServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoggingControlServer struct{}

func (UnimplementedLoggingControlServer) SetLogLevel(context.Context, *SetLogLevelRequest) (*SetLogLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLogLevel not implemented")
}
func (UnimplementedLoggingControlServer) mustEmbedUnimplementedLoggingControlServer() {}
func (UnimplementedLoggingControlServer) testEmbeddedByValue()                        {}

// UnsafeLoggingControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoggingControlServer will
// result in compilation errors.
type UnsafeLoggingControlServer interface {
	mustEmbedUnimplementedLoggingControlServer()
}

func RegisterLoggingControlServer(s grpc.ServiceRegistrar, srv LoggingControlServer) {
	// If the following call pancis, it indicates UnimplementedLoggingControlServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LoggingControl_ServiceDesc, srv)
}

func _LoggingControl_SetLogLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLogLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggingControlServer).SetLogLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoggingControl_SetLogLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggingControlServer).SetLogLevel(ctx, req.(*SetLogLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoggingControl_ServiceDesc is the grpc.ServiceDesc for LoggingControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoggingControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LoggingControl",
	HandlerType: (*LoggingControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetLogLevel",
			Handler:    _LoggingControl_SetLogLevel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

const (
	LogReader_ReadLogs_FullMethodName = "/proto.LogReader/ReadLogs"
)

// LogReaderClient is the client API for LogReader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис для удаленного чтения логов
type LogReaderClient interface {
	// ReadLogs читает логи с применением фильтров
	ReadLogs(ctx context.Context, in *ReadLogsRequest, opts ...grpc.CallOption) (*ReadLogsResponse, error)
}

type logReaderClient struct {
	cc grpc.ClientConnInterface
}

func NewLogReaderClient(cc grpc.ClientConnInterface) LogReaderClient {
	return &logReaderClient{cc}
}

func (c *logReaderClient) ReadLogs(ctx context.Context, in *ReadLogsRequest, opts ...grpc.CallOption) (*ReadLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadLogsResponse)
	err := c.cc.Invoke(ctx, LogReader_ReadLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogReaderServer is the server API for LogReader service.
// All implementations must embed UnimplementedLogReaderServer
// for forward compatibility.
//
// Сервис для удаленного чтения логов
type LogReaderServer interface {
	// ReadLogs читает логи с применением фильтров
	ReadLogs(context.Context, *ReadLogsRequest) (*ReadLogsResponse, error)
	mustEmbedUnimplementedLogReaderServer()
}

// UnimplementedLogReaderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLogReaderServer struct{}

func (UnimplementedLogReaderServer) ReadLogs(context.Context, *ReadLogsRequest) (*ReadLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadLogs not implemented")
}
func (UnimplementedLogReaderServer) mustEmbedUnimplementedLogReaderServer() {}
func (UnimplementedLogReaderServer) testEmbeddedByValue()                   {}

// UnsafeLogReaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogReaderServer will
// result in compilation errors.
type UnsafeLogReaderServer interface {
	mustEmbedUnimplementedLogReaderServer()
}

func RegisterLogReaderServer(s grpc.ServiceRegistrar, srv LogReaderServer) {
	// If the following call pancis, it indicates UnimplementedLogReaderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LogReader_ServiceDesc, srv)
}

func _LogReader_ReadLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogReaderServer).ReadLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogReader_ReadLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogReaderServer).ReadLogs(ctx, req.(*ReadLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogReader_ServiceDesc is the grpc.ServiceDesc for LogReader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogReader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LogReader",
	HandlerType: (*LogReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadLogs",
			Handler:    _LogReader_ReadLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
